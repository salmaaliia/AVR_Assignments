
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000009c4  00000a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000c6  008000c6  00000abe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d00  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001028  00000000  00000000  00003406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00004430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ed  00000000  00000000  00004898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001587  00000000  00000000  00005185  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000670c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_1>
   8:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_2>
   c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ec       	ldi	r26, 0xC6	; 198
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 03 	call	0x76c	; 0x76c <main>
  8a:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	#if CLCD_MODE == CLCD_4BIT
		/*Set RS pin to low for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
		
		/*Set RW pin to low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
		
		/*Send higher nibble*/
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Copy_u8Command & 0xF0));
  aa:	6c 2f       	mov	r22, r28
  ac:	60 7f       	andi	r22, 0xF0	; 240
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_u8SetPortValue>
		
		/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 ef       	ldi	r24, 0xF3	; 243
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <CLCD_voidSendCommand+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <CLCD_voidSendCommand+0x36>
  c8:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	92 e4       	ldi	r25, 0x42	; 66
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <CLCD_voidSendCommand+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <CLCD_voidSendCommand+0x4a>
		
		_delay_us(200);
		
		/*Send lower nibble*/
		DIO_u8SetPortValue(CLCD_DATA_PORT, ((Copy_u8Command<<4)& 0xF0));
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	c8 9f       	mul	r28, r24
  e0:	b0 01       	movw	r22, r0
  e2:	11 24       	eor	r1, r1
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_u8SetPortValue>
		
		/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	83 ef       	ldi	r24, 0xF3	; 243
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <CLCD_voidSendCommand+0x66>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <CLCD_voidSendCommand+0x6c>
  fe:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
		 _delay_ms(2);
		 DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
	#else
	#error "Wrong CLCD MODE"
	#endif
} 
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <CLCD_voidSendData>:
void CLCD_voidSendData(u8 Copy_u8Data)
{
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
	#if CLCD_MODE == CLCD_4BIT
		/*Set RS pin to high for Data*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
		
		/*Set RW pin to low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
		
		/*Send higher nibble*/
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Copy_u8Data &0xF0));
 126:	6c 2f       	mov	r22, r28
 128:	60 7f       	andi	r22, 0xF0	; 240
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_u8SetPortValue>
		
		/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <CLCD_voidSendData+0x30>
 142:	00 c0       	rjmp	.+0      	; 0x144 <CLCD_voidSendData+0x36>
 144:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	92 e4       	ldi	r25, 0x42	; 66
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <CLCD_voidSendData+0x44>
 156:	00 c0       	rjmp	.+0      	; 0x158 <CLCD_voidSendData+0x4a>
		
		_delay_us(200);
		
		/*Send lower nibble*/
		DIO_u8SetPortValue(CLCD_DATA_PORT, ((Copy_u8Data<<4) &0xF0));
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	c8 9f       	mul	r28, r24
 15c:	b0 01       	movw	r22, r0
 15e:	11 24       	eor	r1, r1
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_u8SetPortValue>
		
		/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <CLCD_voidSendData+0x66>
 178:	00 c0       	rjmp	.+0      	; 0x17a <CLCD_voidSendData+0x6c>
 17a:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8SetPinValue>
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
	#else
	#error "Wrong CLCD MODE"
	#endif
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
	int i;
	for (i= 0; Copy_pcString[i]!='\0'; i++)
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <CLCD_voidSendString+0x16>
	{
		CLCD_voidSendData(Copy_pcString[i]);   
 19a:	0e 94 87 00 	call	0x10e	; 0x10e <CLCD_voidSendData>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	int i;
	for (i= 0; Copy_pcString[i]!='\0'; i++)
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	f8 01       	movw	r30, r16
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	81 11       	cpse	r24, r1
 1aa:	f7 cf       	rjmp	.-18     	; 0x19a <CLCD_voidSendString+0x10>
	{
		CLCD_voidSendData(Copy_pcString[i]);   
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <CLCD_voidG0ToXY>:

void CLCD_voidG0ToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
	u8 Local_u8Address = 0;
	if(Copy_u8Xpos == 0)  
 1b6:	88 23       	and	r24, r24
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <CLCD_voidG0ToXY+0xe>
	{
		/*Location is at first line*/
		Local_u8Address = Copy_u8Ypos;
	}
	else if(Copy_u8Xpos == 1)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <CLCD_voidG0ToXY+0xc>
	{
		/*Location is at second line*/
		Local_u8Address = Copy_u8Ypos + 0x40;
 1be:	60 5c       	subi	r22, 0xC0	; 192
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <CLCD_voidG0ToXY+0xe>
	}
}

void CLCD_voidG0ToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
	u8 Local_u8Address = 0;
 1c2:	60 e0       	ldi	r22, 0x00	; 0
	{
		/*Location is at second line*/
		Local_u8Address = Copy_u8Ypos + 0x40;
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	86 0f       	add	r24, r22
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
 1cc:	08 95       	ret

000001ce <CLCD_voidWriteSpecialChar>:
}

void CLCD_voidWriteSpecialChar(u8* Copy_pu8Pattern,  u8 Copy_u8PatternNumber, u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	8c 01       	movw	r16, r24
 1de:	f6 2e       	mov	r15, r22
 1e0:	e4 2e       	mov	r14, r20
 1e2:	d2 2e       	mov	r13, r18
	//u8 Local_u8CGRAM_Address;
	
	/*Calculate CGRAM Address whose each block is 8 bytes*/
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber*8;
 1e4:	86 2f       	mov	r24, r22
 1e6:	88 0f       	add	r24, r24
 1e8:	88 0f       	add	r24, r24
 1ea:	88 0f       	add	r24, r24
	
	/*Send CGRAM Address to LCd, with setting bit 6, clearing bit 7*/
	SET_BIT(Local_u8CGRAM_Address, 6);
	CLCD_voidSendCommand(Local_u8CGRAM_Address);
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	
	/*Write the pattern into CGRAM*/
	for (int i=0; i<8; i++)
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <CLCD_voidWriteSpecialChar+0x38>
	{
		CLCD_voidSendData( Copy_pu8Pattern[i]);
 1f8:	f8 01       	movw	r30, r16
 1fa:	ec 0f       	add	r30, r28
 1fc:	fd 1f       	adc	r31, r29
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 87 00 	call	0x10e	; 0x10e <CLCD_voidSendData>
	/*Send CGRAM Address to LCd, with setting bit 6, clearing bit 7*/
	SET_BIT(Local_u8CGRAM_Address, 6);
	CLCD_voidSendCommand(Local_u8CGRAM_Address);
	
	/*Write the pattern into CGRAM*/
	for (int i=0; i<8; i++)
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c8 30       	cpi	r28, 0x08	; 8
 208:	d1 05       	cpc	r29, r1
 20a:	b4 f3       	brlt	.-20     	; 0x1f8 <CLCD_voidWriteSpecialChar+0x2a>
	{
		CLCD_voidSendData( Copy_pu8Pattern[i]);
	}
	
	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidG0ToXY( Copy_u8Xpos, Copy_u8Ypos);
 20c:	6d 2d       	mov	r22, r13
 20e:	8e 2d       	mov	r24, r14
 210:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
	
	/*Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
 214:	8f 2d       	mov	r24, r15
 216:	0e 94 87 00 	call	0x10e	; 0x10e <CLCD_voidSendData>
	
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	08 95       	ret

0000022a <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
 22a:	8f 92       	push	r8
 22c:	9f 92       	push	r9
 22e:	af 92       	push	r10
 230:	bf 92       	push	r11
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	cf 93       	push	r28
 23c:	4b 01       	movw	r8, r22
 23e:	5c 01       	movw	r10, r24
	u8 Local_u8NumOfDigits = 0;
	u8 Local_u8Quotient = 1;
 240:	21 e0       	ldi	r18, 0x01	; 1
	
}

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
	u8 Local_u8NumOfDigits = 0;
 242:	c1 2c       	mov	r12, r1
	u8 Local_u8Quotient = 1;
	u8 Local_u8Digit;
	/*Calculate the number of digits*/
	while(Local_u8Quotient!=0)
 244:	11 c0       	rjmp	.+34     	; 0x268 <CLCD_voidSendNumber+0x3e>
	{
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
 246:	c3 94       	inc	r12
 248:	2c 2d       	mov	r18, r12
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MATH_u32Power>
 25c:	9b 01       	movw	r18, r22
 25e:	ac 01       	movw	r20, r24
 260:	c5 01       	movw	r24, r10
 262:	b4 01       	movw	r22, r8
 264:	0e 94 a4 04 	call	0x948	; 0x948 <__udivmodsi4>
{
	u8 Local_u8NumOfDigits = 0;
	u8 Local_u8Quotient = 1;
	u8 Local_u8Digit;
	/*Calculate the number of digits*/
	while(Local_u8Quotient!=0)
 268:	21 11       	cpse	r18, r1
 26a:	ed cf       	rjmp	.-38     	; 0x246 <CLCD_voidSendNumber+0x1c>
	{
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--)
 26c:	d1 2c       	mov	r13, r1
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	c8 1a       	sub	r12, r24
 272:	d1 08       	sbc	r13, r1
 274:	0d 2c       	mov	r0, r13
 276:	00 0c       	add	r0, r0
 278:	ee 08       	sbc	r14, r14
 27a:	ff 08       	sbc	r15, r15
 27c:	28 c0       	rjmp	.+80     	; 0x2ce <CLCD_voidSendNumber+0xa4>
	{
		Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
 27e:	a7 01       	movw	r20, r14
 280:	96 01       	movw	r18, r12
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MATH_u32Power>
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	c5 01       	movw	r24, r10
 294:	b4 01       	movw	r22, r8
 296:	0e 94 a4 04 	call	0x948	; 0x948 <__udivmodsi4>
 29a:	c2 2f       	mov	r28, r18
		Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
 29c:	a7 01       	movw	r20, r14
 29e:	96 01       	movw	r18, r12
 2a0:	6a e0       	ldi	r22, 0x0A	; 10
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MATH_u32Power>
 2ac:	9b 01       	movw	r18, r22
 2ae:	ac 01       	movw	r20, r24
 2b0:	c5 01       	movw	r24, r10
 2b2:	b4 01       	movw	r22, r8
 2b4:	0e 94 a4 04 	call	0x948	; 0x948 <__udivmodsi4>
 2b8:	4b 01       	movw	r8, r22
 2ba:	5c 01       	movw	r10, r24
		Local_u8Digit+=48;
		CLCD_voidSendData(Local_u8Digit);
 2bc:	80 e3       	ldi	r24, 0x30	; 48
 2be:	8c 0f       	add	r24, r28
 2c0:	0e 94 87 00 	call	0x10e	; 0x10e <CLCD_voidSendData>
	while(Local_u8Quotient!=0)
	{
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--)
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	c8 1a       	sub	r12, r24
 2c8:	d1 08       	sbc	r13, r1
 2ca:	e1 08       	sbc	r14, r1
 2cc:	f1 08       	sbc	r15, r1
 2ce:	ff 20       	and	r15, r15
 2d0:	b4 f6       	brge	.-84     	; 0x27e <CLCD_voidSendNumber+0x54>
		Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
		Local_u8Digit+=48;
		CLCD_voidSendData(Local_u8Digit);
	}
	
}
 2d2:	cf 91       	pop	r28
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	08 95       	ret

000002e6 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
	CLCD_voidSendCommand(0b00000001);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
 2ec:	08 95       	ret

000002ee <CLCD_voidInit>:
 2ee:	8f e0       	ldi	r24, 0x0F	; 15
 2f0:	97 e2       	ldi	r25, 0x27	; 39
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <CLCD_voidInit+0x4>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <CLCD_voidInit+0xa>
 2f8:	00 00       	nop
	/*Wait for more than 30ms*/
	_delay_ms(40);
	
	if(CLCD_MODE == CLCD_4BIT)
	{
		CLCD_voidSendCommand(0x33);
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x32);
 300:	82 e3       	ldi	r24, 0x32	; 50
 302:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	}
	
	/*Function set */
	CLCD_voidSendCommand(CLCD_FUNCTION_SET); 
 306:	88 e2       	ldi	r24, 0x28	; 40
 308:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	9d e0       	ldi	r25, 0x0D	; 13
 30e:	9a 95       	dec	r25
 310:	f1 f7       	brne	.-4      	; 0x30e <CLCD_voidInit+0x20>
	
	_delay_us(39);
	
	/*Display ON/OFF control*/
	CLCD_voidSendCommand(CLCD_DISPLAY_ON_OFF);
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
 318:	8d e0       	ldi	r24, 0x0D	; 13
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <CLCD_voidInit+0x2c>
	
	_delay_us(39);
	
	/*Clear display*/
	CLCD_voidSendCommand(1);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	83 ef       	ldi	r24, 0xF3	; 243
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <CLCD_voidInit+0x3a>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <CLCD_voidInit+0x40>
 32e:	00 00       	nop
 330:	08 95       	ret

00000332 <DIO_u8SetPinValue>:
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
	if(Copy_u8Pin<=DIO_u8PIN7)
 332:	68 30       	cpi	r22, 0x08	; 8
 334:	08 f0       	brcs	.+2      	; 0x338 <DIO_u8SetPinValue+0x6>
 336:	78 c0       	rjmp	.+240    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 338:	41 11       	cpse	r20, r1
 33a:	3c c0       	rjmp	.+120    	; 0x3b4 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	99 f0       	breq	.+38     	; 0x366 <DIO_u8SetPinValue+0x34>
 340:	28 f0       	brcs	.+10     	; 0x34c <DIO_u8SetPinValue+0x1a>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	e9 f0       	breq	.+58     	; 0x380 <DIO_u8SetPinValue+0x4e>
 346:	83 30       	cpi	r24, 0x03	; 3
 348:	41 f1       	breq	.+80     	; 0x39a <DIO_u8SetPinValue+0x68>
 34a:	70 c0       	rjmp	.+224    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 34c:	2b b3       	in	r18, 0x1b	; 27
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8SetPinValue+0x26>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8SetPinValue+0x22>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	8b bb       	out	0x1b, r24	; 27
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 362:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 364:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 366:	28 b3       	in	r18, 0x18	; 24
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_u8SetPinValue+0x40>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_u8SetPinValue+0x3c>
 376:	80 95       	com	r24
 378:	82 23       	and	r24, r18
 37a:	88 bb       	out	0x18, r24	; 24
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 37c:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 37e:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 380:	25 b3       	in	r18, 0x15	; 21
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8SetPinValue+0x5a>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8SetPinValue+0x56>
 390:	80 95       	com	r24
 392:	82 23       	and	r24, r18
 394:	85 bb       	out	0x15, r24	; 21
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 396:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 398:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_u8SetPinValue+0x74>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_u8SetPinValue+0x70>
 3aa:	80 95       	com	r24
 3ac:	82 23       	and	r24, r18
 3ae:	82 bb       	out	0x12, r24	; 18
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 3b0:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 3b2:	08 95       	ret
				default: Local_u8_ErrorState =1;
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	e1 f5       	brne	.+120    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		{
			switch(Copy_u8Port)
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	91 f0       	breq	.+36     	; 0x3e0 <DIO_u8SetPinValue+0xae>
 3bc:	28 f0       	brcs	.+10     	; 0x3c8 <DIO_u8SetPinValue+0x96>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	d9 f0       	breq	.+54     	; 0x3f8 <DIO_u8SetPinValue+0xc6>
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	29 f1       	breq	.+74     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3c6:	36 c0       	rjmp	.+108    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 3c8:	2b b3       	in	r18, 0x1b	; 27
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8SetPinValue+0xa2>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8SetPinValue+0x9e>
 3d8:	82 2b       	or	r24, r18
 3da:	8b bb       	out	0x1b, r24	; 27
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 3dc:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 3de:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 3e0:	28 b3       	in	r18, 0x18	; 24
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPinValue+0xba>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8SetPinValue+0xb6>
 3f0:	82 2b       	or	r24, r18
 3f2:	88 bb       	out	0x18, r24	; 24
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 3f4:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 3f6:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 3f8:	25 b3       	in	r18, 0x15	; 21
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	82 2b       	or	r24, r18
 40a:	85 bb       	out	0x15, r24	; 21
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 40c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 40e:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 410:	22 b3       	in	r18, 0x12	; 18
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	82 bb       	out	0x12, r24	; 18
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 424:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 426:	08 95       	ret
			Local_u8_ErrorState =1;
		}	
	}
	else
	{
		Local_u8_ErrorState =1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8_ErrorState =1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret
				default: Local_u8_ErrorState =1;
			}
		}
		else
		{
			Local_u8_ErrorState =1;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8_ErrorState =1;
 434:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8_ErrorState =1;
	}
	return Local_u8_ErrorState;
}
 436:	08 95       	ret

00000438 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
	switch(Copy_u8Port)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	49 f0       	breq	.+18     	; 0x44e <DIO_u8SetPortValue+0x16>
 43c:	28 f0       	brcs	.+10     	; 0x448 <DIO_u8SetPortValue+0x10>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	49 f0       	breq	.+18     	; 0x454 <DIO_u8SetPortValue+0x1c>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	51 f0       	breq	.+20     	; 0x45a <DIO_u8SetPortValue+0x22>
 446:	0c c0       	rjmp	.+24     	; 0x460 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 448:	6b bb       	out	0x1b, r22	; 27
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 44a:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 44c:	08 95       	ret
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 44e:	68 bb       	out	0x18, r22	; 24
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 450:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 452:	08 95       	ret
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 454:	65 bb       	out	0x15, r22	; 21
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 456:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 458:	08 95       	ret
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 45a:	62 bb       	out	0x12, r22	; 18
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 45c:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 45e:	08 95       	ret
		default: Local_u8_ErrorState =1;
 460:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	return Local_u8_ErrorState;	
}
 462:	08 95       	ret

00000464 <EXTI_voidInt0Init>:
		case INT2: CLR_BIT(GICR, GICR_INT2); break;
		default: Local_u8_ErrorState = NOK;
	}
	
	return Local_u8_ErrorState;
}
 464:	85 b7       	in	r24, 0x35	; 53
 466:	82 60       	ori	r24, 0x02	; 2
 468:	85 bf       	out	0x35, r24	; 53
 46a:	85 b7       	in	r24, 0x35	; 53
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	85 bf       	out	0x35, r24	; 53
 470:	8b b7       	in	r24, 0x3b	; 59
 472:	80 64       	ori	r24, 0x40	; 64
 474:	8b bf       	out	0x3b, r24	; 59
 476:	08 95       	ret

00000478 <EXTI_voidInt1Init>:
 478:	85 b7       	in	r24, 0x35	; 53
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	85 bf       	out	0x35, r24	; 53
 47e:	85 b7       	in	r24, 0x35	; 53
 480:	8b 7f       	andi	r24, 0xFB	; 251
 482:	85 bf       	out	0x35, r24	; 53
 484:	8b b7       	in	r24, 0x3b	; 59
 486:	80 68       	ori	r24, 0x80	; 128
 488:	8b bf       	out	0x3b, r24	; 59
 48a:	08 95       	ret

0000048c <EXTI_voidInt2Init>:
 48c:	84 b7       	in	r24, 0x34	; 52
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	84 bf       	out	0x34, r24	; 52
 492:	8b b7       	in	r24, 0x3b	; 59
 494:	80 62       	ori	r24, 0x20	; 32
 496:	8b bf       	out	0x3b, r24	; 59
 498:	08 95       	ret

0000049a <EXTI_u8Int0SendISR>:
/************************************************************************************************/
u8 EXTI_u8Int0SendISR(void(*Copy_PvInt0Func)(void))
{
	u8 Local_u8_ErrorState = OK;
	if (Copy_PvInt0Func != NULL)
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	31 f0       	breq	.+12     	; 0x4aa <EXTI_u8Int0SendISR+0x10>
	{
		EXTI_pvInt0Func = Copy_PvInt0Func;
 49e:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <EXTI_pvInt0Func+0x1>
 4a2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <EXTI_pvInt0Func>
	return Local_u8_ErrorState;
}
/************************************************************************************************/
u8 EXTI_u8Int0SendISR(void(*Copy_PvInt0Func)(void))
{
	u8 Local_u8_ErrorState = OK;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret
	{
		EXTI_pvInt0Func = Copy_PvInt0Func;
	}
	else
	{
		Local_u8_ErrorState = NULL_POINTER;
 4aa:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_u8_ErrorState;
}
 4ac:	08 95       	ret

000004ae <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	EXTI_pvInt0Func();
 4d0:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <EXTI_pvInt0Func>
 4d4:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <EXTI_pvInt0Func+0x1>
 4d8:	09 95       	icall
}
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	bf 91       	pop	r27
 4e0:	af 91       	pop	r26
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	7f 91       	pop	r23
 4e8:	6f 91       	pop	r22
 4ea:	5f 91       	pop	r21
 4ec:	4f 91       	pop	r20
 4ee:	3f 91       	pop	r19
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <EXTI_u8Int1SendISR>:
/************************************************************************************************/
u8 EXTI_u8Int1SendISR(void(*Copy_PvInt1Func)(void))
{
	u8 Local_u8_ErrorState = OK;
	
	if(Copy_PvInt1Func!=NULL)
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	31 f0       	breq	.+12     	; 0x50c <EXTI_u8Int1SendISR+0x10>
	{
		EXTI_pvInt1Func = Copy_PvInt1Func;
 500:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <EXTI_pvInt1Func+0x1>
 504:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <EXTI_pvInt1Func>
}

/************************************************************************************************/
u8 EXTI_u8Int1SendISR(void(*Copy_PvInt1Func)(void))
{
	u8 Local_u8_ErrorState = OK;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
	if(Copy_PvInt1Func!=NULL)
	{
		EXTI_pvInt1Func = Copy_PvInt1Func;
	}
	else{
		Local_u8_ErrorState = NULL_POINTER;
 50c:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_u8_ErrorState;
	
}
 50e:	08 95       	ret

00000510 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	EXTI_pvInt1Func();
 532:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <EXTI_pvInt1Func>
 536:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <EXTI_pvInt1Func+0x1>
 53a:	09 95       	icall
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <EXTI_u8Int2SendISR>:
/************************************************************************************************/
u8 EXTI_u8Int2SendISR(void(*Copy_PvInt2Func)(void))
{
	u8 Local_u8_ErrorState = OK;
	
	if(Copy_PvInt2Func != NULL)
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	31 f0       	breq	.+12     	; 0x56e <EXTI_u8Int2SendISR+0x10>
	{
		EXTI_pvInt2Func = Copy_PvInt2Func;
 562:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <__data_end+0x1>
 566:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end>
}

/************************************************************************************************/
u8 EXTI_u8Int2SendISR(void(*Copy_PvInt2Func)(void))
{
	u8 Local_u8_ErrorState = OK;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
	if(Copy_PvInt2Func != NULL)
	{
		EXTI_pvInt2Func = Copy_PvInt2Func;
	}
	else{
		Local_u8_ErrorState = NULL_POINTER;
 56e:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_u8_ErrorState;
}
 570:	08 95       	ret

00000572 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	EXTI_pvInt2Func();
 594:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__data_end>
 598:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <__data_end+0x1>
 59c:	09 95       	icall
}
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	bf 91       	pop	r27
 5a4:	af 91       	pop	r26
 5a6:	9f 91       	pop	r25
 5a8:	8f 91       	pop	r24
 5aa:	7f 91       	pop	r23
 5ac:	6f 91       	pop	r22
 5ae:	5f 91       	pop	r21
 5b0:	4f 91       	pop	r20
 5b2:	3f 91       	pop	r19
 5b4:	2f 91       	pop	r18
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <GIE_voidEnable>:
#include "GIE_interface.h"


void GIE_voidEnable(void)
{
	SET_BIT(SREG, SREG_I);
 5c0:	8f b7       	in	r24, 0x3f	; 63
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	8f bf       	out	0x3f, r24	; 63
 5c6:	08 95       	ret

000005c8 <INT0_ISR>:
	}
}

void INT0_ISR(void)
{
	Global_u8Player1Flag = 1;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <Global_u8Player1Flag>
 5ce:	08 95       	ret

000005d0 <INT1_ISR>:
}

void INT1_ISR(void)
{
	Global_u8Player2Flag = 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <Global_u8Player2Flag>
 5d6:	08 95       	ret

000005d8 <INT2_ISR>:
}

void INT2_ISR(void)
{
	CLCD_voidClearDisplay();
 5d8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
	Global_u8RestartFlag = 1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <Global_u8RestartFlag>
 5e2:	08 95       	ret

000005e4 <APP_voidStartScreen>:
    }
}

void APP_voidStartScreen(void)
{
	CLCD_voidG0ToXY(0, 0);
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
	CLCD_voidSendString("Press B2 To");
 5ec:	83 e7       	ldi	r24, 0x73	; 115
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
	CLCD_voidG0ToXY(1,0);
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
	CLCD_voidSendString("Start Playing");
 5fc:	8f e7       	ldi	r24, 0x7F	; 127
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
 604:	2f e3       	ldi	r18, 0x3F	; 63
 606:	8d e0       	ldi	r24, 0x0D	; 13
 608:	93 e0       	ldi	r25, 0x03	; 3
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <APP_voidStartScreen+0x26>
 612:	00 c0       	rjmp	.+0      	; 0x614 <APP_voidStartScreen+0x30>
 614:	00 00       	nop
	_delay_ms(1000);
	CLCD_voidClearDisplay();
 616:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
 61a:	08 95       	ret

0000061c <APP_voidDisplayWin>:
}
void APP_voidDisplayWin(u8 Copy_u8PlayerNum)
{
	if(Copy_u8PlayerNum == 1)
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	09 f0       	breq	.+2      	; 0x622 <APP_voidDisplayWin+0x6>
 620:	51 c0       	rjmp	.+162    	; 0x6c4 <APP_voidDisplayWin+0xa8>
	{
		l = 2;
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Global_u8Player1WinDetect++;
 628:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <Global_u8Player1WinDetect>
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Global_u8Player1WinDetect>
		CLCD_voidClearDisplay();
 632:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
		CLCD_voidG0ToXY(0, 0);
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendString("Player 1 wins!");
 63e:	8d e8       	ldi	r24, 0x8D	; 141
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
		CLCD_voidG0ToXY(1, 0);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendNumber(Global_u8Player1WinDetect);
 64e:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <Global_u8Player1WinDetect>
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 15 01 	call	0x22a	; 0x22a <CLCD_voidSendNumber>
		CLCD_voidSendString(" / ");
 65c:	8c e9       	ldi	r24, 0x9C	; 156
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
		CLCD_voidSendNumber(Global_u8Player2WinDetect);
 664:	60 91 cc 00 	lds	r22, 0x00CC	; 0x8000cc <Global_u8Player2WinDetect>
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 15 01 	call	0x22a	; 0x22a <CLCD_voidSendNumber>
 672:	2f e3       	ldi	r18, 0x3F	; 63
 674:	8d e0       	ldi	r24, 0x0D	; 13
 676:	93 e0       	ldi	r25, 0x03	; 3
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <APP_voidDisplayWin+0x5c>
 680:	00 c0       	rjmp	.+0      	; 0x682 <APP_voidDisplayWin+0x66>
 682:	00 00       	nop
		_delay_ms(1000);
		CLCD_voidClearDisplay();
 684:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
		CLCD_voidG0ToXY(0, 0);
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendString("To play again");
 690:	80 ea       	ldi	r24, 0xA0	; 160
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
		CLCD_voidG0ToXY(1, 0);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendString("Press B2");
 6a0:	8e ea       	ldi	r24, 0xAE	; 174
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
 6a8:	2f e3       	ldi	r18, 0x3F	; 63
 6aa:	8d e0       	ldi	r24, 0x0D	; 13
 6ac:	93 e0       	ldi	r25, 0x03	; 3
 6ae:	21 50       	subi	r18, 0x01	; 1
 6b0:	80 40       	sbci	r24, 0x00	; 0
 6b2:	90 40       	sbci	r25, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <APP_voidDisplayWin+0x92>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <APP_voidDisplayWin+0x9c>
 6b8:	00 00       	nop
		_delay_ms(1000);
		CLCD_voidClearDisplay();
 6ba:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
		Global_u8RestartFlag = 0;
 6be:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <Global_u8RestartFlag>
 6c2:	08 95       	ret
	}
	else if(Copy_u8PlayerNum == 2)
 6c4:	82 30       	cpi	r24, 0x02	; 2
 6c6:	09 f0       	breq	.+2      	; 0x6ca <APP_voidDisplayWin+0xae>
 6c8:	50 c0       	rjmp	.+160    	; 0x76a <APP_voidDisplayWin+0x14e>
	{
		l = 1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Global_u8Player2WinDetect++;
 6d0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Global_u8Player2WinDetect>
 6d4:	8f 5f       	subi	r24, 0xFF	; 255
 6d6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Global_u8Player2WinDetect>
		CLCD_voidClearDisplay();
 6da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
		CLCD_voidG0ToXY(0, 0);
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendString("Player 2 wins!");
 6e6:	87 eb       	ldi	r24, 0xB7	; 183
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
		CLCD_voidG0ToXY(1, 0);
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendNumber(Global_u8Player1WinDetect);
 6f6:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <Global_u8Player1WinDetect>
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 15 01 	call	0x22a	; 0x22a <CLCD_voidSendNumber>
		CLCD_voidSendString(" / ");
 704:	8c e9       	ldi	r24, 0x9C	; 156
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
		CLCD_voidSendNumber(Global_u8Player2WinDetect);
 70c:	60 91 cc 00 	lds	r22, 0x00CC	; 0x8000cc <Global_u8Player2WinDetect>
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 15 01 	call	0x22a	; 0x22a <CLCD_voidSendNumber>
 71a:	2f e3       	ldi	r18, 0x3F	; 63
 71c:	8d e0       	ldi	r24, 0x0D	; 13
 71e:	93 e0       	ldi	r25, 0x03	; 3
 720:	21 50       	subi	r18, 0x01	; 1
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <APP_voidDisplayWin+0x104>
 728:	00 c0       	rjmp	.+0      	; 0x72a <APP_voidDisplayWin+0x10e>
 72a:	00 00       	nop
		_delay_ms(1000);
		CLCD_voidClearDisplay();
 72c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
		CLCD_voidG0ToXY(0, 0);
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendString("To play again");
 738:	80 ea       	ldi	r24, 0xA0	; 160
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
		CLCD_voidG0ToXY(1, 0);
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
		CLCD_voidSendString("Press B2");
 748:	8e ea       	ldi	r24, 0xAE	; 174
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendString>
 750:	2f e3       	ldi	r18, 0x3F	; 63
 752:	8d e0       	ldi	r24, 0x0D	; 13
 754:	93 e0       	ldi	r25, 0x03	; 3
 756:	21 50       	subi	r18, 0x01	; 1
 758:	80 40       	sbci	r24, 0x00	; 0
 75a:	90 40       	sbci	r25, 0x00	; 0
 75c:	e1 f7       	brne	.-8      	; 0x756 <APP_voidDisplayWin+0x13a>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <APP_voidDisplayWin+0x144>
 760:	00 00       	nop
		_delay_ms(1000);
		CLCD_voidClearDisplay();
 762:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLCD_voidClearDisplay>
		Global_u8RestartFlag = 0;
 766:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <Global_u8RestartFlag>
 76a:	08 95       	ret

0000076c <main>:
void APP_voidDisplayWin(u8);
void APP_voidStartScreen(void);

int main(void)
{
	PORT_voidInit();
 76c:	0e 94 87 04 	call	0x90e	; 0x90e <PORT_voidInit>
	CLCD_voidInit();
 770:	0e 94 77 01 	call	0x2ee	; 0x2ee <CLCD_voidInit>
	EXTI_voidInt0Init();
 774:	0e 94 32 02 	call	0x464	; 0x464 <EXTI_voidInt0Init>
	EXTI_u8Int0SendISR(&INT0_ISR);
 778:	84 ee       	ldi	r24, 0xE4	; 228
 77a:	92 e0       	ldi	r25, 0x02	; 2
 77c:	0e 94 4d 02 	call	0x49a	; 0x49a <EXTI_u8Int0SendISR>
	
	EXTI_voidInt1Init();
 780:	0e 94 3c 02 	call	0x478	; 0x478 <EXTI_voidInt1Init>
	EXTI_u8Int1SendISR(&INT1_ISR);
 784:	88 ee       	ldi	r24, 0xE8	; 232
 786:	92 e0       	ldi	r25, 0x02	; 2
 788:	0e 94 7e 02 	call	0x4fc	; 0x4fc <EXTI_u8Int1SendISR>
	
	EXTI_voidInt2Init();
 78c:	0e 94 46 02 	call	0x48c	; 0x48c <EXTI_voidInt2Init>
	EXTI_u8Int2SendISR(&INT2_ISR);
 790:	8c ee       	ldi	r24, 0xEC	; 236
 792:	92 e0       	ldi	r25, 0x02	; 2
 794:	0e 94 af 02 	call	0x55e	; 0x55e <EXTI_u8Int2SendISR>
	GIE_voidEnable();
 798:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <GIE_voidEnable>
	
	APP_voidStartScreen();
 79c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <APP_voidStartScreen>
	
	u8 Global_u8YIncrementOrDecrementFlag = 1;
 7a0:	c1 e0       	ldi	r28, 0x01	; 1
	while(1)
    {
		if(Global_u8RestartFlag)
 7a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Global_u8RestartFlag>
 7a6:	88 23       	and	r24, r24
 7a8:	e1 f3       	breq	.-8      	; 0x7a2 <main+0x36>
		 {
			 if(l == 2){
 7aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	31 f4       	brne	.+12     	; 0x7be <main+0x52>
				 x = 0, y = 1;
 7b2:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <x>
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y>
 7bc:	07 c0       	rjmp	.+14     	; 0x7cc <main+0x60>
			 }
			 else if(l == 1)
 7be:	81 30       	cpi	r24, 0x01	; 1
 7c0:	29 f4       	brne	.+10     	; 0x7cc <main+0x60>
			 {
				 x = 1, y = 14;
 7c2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <x>
 7c6:	8e e0       	ldi	r24, 0x0E	; 14
 7c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y>
			 }
			 Global_u8Player1Flag = 0, Global_u8Player2Flag = 0;
 7cc:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <Global_u8Player1Flag>
 7d0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Global_u8Player2Flag>
			 while(1)
			 {
				 /*
				 * Display two rackets
				 */
				 CLCD_voidWriteSpecialChar(Global_u8RacketPattern, 0, 1, 0);
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	89 e6       	ldi	r24, 0x69	; 105
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD_voidWriteSpecialChar>
				 CLCD_voidWriteSpecialChar(Global_u8RacketPattern, 0, 0, 15);
 7e2:	2f e0       	ldi	r18, 0x0F	; 15
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	89 e6       	ldi	r24, 0x69	; 105
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD_voidWriteSpecialChar>
				 
				 /*
				 * Player 1
				 */
				 if(Global_u8Player1Flag == 1){
 7f0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <Global_u8Player1Flag>
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	19 f4       	brne	.+6      	; 0x7fe <main+0x92>
					 Global_u8Player1Flag = 0;
 7f8:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <Global_u8Player1Flag>
 7fc:	0a c0       	rjmp	.+20     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
				 }
				 else if(Global_u8Player1Flag == 0){
 7fe:	81 11       	cpse	r24, r1
 800:	08 c0       	rjmp	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
						 if(y == 0){
 802:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y>
 806:	81 11       	cpse	r24, r1
 808:	04 c0       	rjmp	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
							 APP_voidDisplayWin(2);
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	0e 94 0e 03 	call	0x61c	; 0x61c <APP_voidDisplayWin>
							 break;
 810:	c8 cf       	rjmp	.-112    	; 0x7a2 <main+0x36>
				 
				 
				 /*
				 * Player2
				 */
				 if(Global_u8Player2Flag == 1)
 812:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Global_u8Player2Flag>
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	19 f4       	brne	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				 {

					Global_u8Player2Flag = 0;
 81a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Global_u8Player2Flag>
 81e:	0a c0       	rjmp	.+20     	; 0x834 <__DATA_REGION_LENGTH__+0x34>

				 }
				 else if(Global_u8Player2Flag == 0)
 820:	81 11       	cpse	r24, r1
 822:	08 c0       	rjmp	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
				 {
					 if(y == 15){
 824:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y>
 828:	8f 30       	cpi	r24, 0x0F	; 15
 82a:	21 f4       	brne	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
						 APP_voidDisplayWin(1);
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	0e 94 0e 03 	call	0x61c	; 0x61c <APP_voidDisplayWin>
						 break;
 832:	b7 cf       	rjmp	.-146    	; 0x7a2 <main+0x36>
					 }
				 }
				 
				 
				 
				 if(y == 15) Global_u8YIncrementOrDecrementFlag = 0;
 834:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <y>
 838:	2f 30       	cpi	r18, 0x0F	; 15
 83a:	09 f4       	brne	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83c:	c0 e0       	ldi	r28, 0x00	; 0
				 if(y == 0) Global_u8YIncrementOrDecrementFlag = 1;
 83e:	21 11       	cpse	r18, r1
 840:	01 c0       	rjmp	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 842:	c1 e0       	ldi	r28, 0x01	; 1
				 CLCD_voidWriteSpecialChar(Global_u8BallPattern, 2, x, y);
 844:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <x>
 848:	62 e0       	ldi	r22, 0x02	; 2
 84a:	82 e6       	ldi	r24, 0x62	; 98
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD_voidWriteSpecialChar>
 852:	87 ea       	ldi	r24, 0xA7	; 167
 854:	91 e6       	ldi	r25, 0x61	; 97
 856:	01 97       	sbiw	r24, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85c:	00 00       	nop
				 _delay_ms(100);
				 CLCD_voidG0ToXY(x,y);
 85e:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <y>
 862:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <x>
 866:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CLCD_voidG0ToXY>
				 CLCD_voidSendData(' ');
 86a:	80 e2       	ldi	r24, 0x20	; 32
 86c:	0e 94 87 00 	call	0x10e	; 0x10e <CLCD_voidSendData>
				 //CLCD_voidWriteSpecialChar(0x00, 3, x, y);
				 if(x == 0) x = 1;
 870:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <x>
 874:	81 11       	cpse	r24, r1
 876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <x>
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__stack+0x29>
				 else if (x == 1) x = 0;
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	11 f4       	brne	.+4      	; 0x888 <__stack+0x29>
 884:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <x>
				 if(Global_u8YIncrementOrDecrementFlag) y++;
 888:	cc 23       	and	r28, r28
 88a:	31 f0       	breq	.+12     	; 0x898 <__stack+0x39>
 88c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y>
 890:	8f 5f       	subi	r24, 0xFF	; 255
 892:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y>
 896:	9e cf       	rjmp	.-196    	; 0x7d4 <main+0x68>
				 else y--;
 898:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y>
 89c:	81 50       	subi	r24, 0x01	; 1
 89e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y>
 8a2:	98 cf       	rjmp	.-208    	; 0x7d4 <main+0x68>

000008a4 <MATH_u32Power>:
#include "STD_TYPES.h"
#include "MATH.h"

u32 MATH_u32Power(u32 Copy_u32Num, u32 Copy_u32Exponent)
{
 8a4:	4f 92       	push	r4
 8a6:	5f 92       	push	r5
 8a8:	6f 92       	push	r6
 8aa:	7f 92       	push	r7
 8ac:	8f 92       	push	r8
 8ae:	9f 92       	push	r9
 8b0:	af 92       	push	r10
 8b2:	bf 92       	push	r11
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ef 92       	push	r14
 8ba:	ff 92       	push	r15
 8bc:	2b 01       	movw	r4, r22
 8be:	3c 01       	movw	r6, r24
 8c0:	49 01       	movw	r8, r18
 8c2:	5a 01       	movw	r10, r20
	u32 Local_u32Itr;
	u32 Local_u32Res=1;
 8c4:	61 e0       	ldi	r22, 0x01	; 1
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
	for(Local_u32Itr = 0; Local_u32Itr<Copy_u32Exponent; Local_u32Itr++)
 8cc:	c1 2c       	mov	r12, r1
 8ce:	d1 2c       	mov	r13, r1
 8d0:	76 01       	movw	r14, r12
 8d2:	0b c0       	rjmp	.+22     	; 0x8ea <MATH_u32Power+0x46>
	{
		Local_u32Res*=Copy_u32Num;
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	c3 01       	movw	r24, r6
 8da:	b2 01       	movw	r22, r4
 8dc:	0e 94 94 04 	call	0x928	; 0x928 <__mulsi3>

u32 MATH_u32Power(u32 Copy_u32Num, u32 Copy_u32Exponent)
{
	u32 Local_u32Itr;
	u32 Local_u32Res=1;
	for(Local_u32Itr = 0; Local_u32Itr<Copy_u32Exponent; Local_u32Itr++)
 8e0:	2f ef       	ldi	r18, 0xFF	; 255
 8e2:	c2 1a       	sub	r12, r18
 8e4:	d2 0a       	sbc	r13, r18
 8e6:	e2 0a       	sbc	r14, r18
 8e8:	f2 0a       	sbc	r15, r18
 8ea:	c8 14       	cp	r12, r8
 8ec:	d9 04       	cpc	r13, r9
 8ee:	ea 04       	cpc	r14, r10
 8f0:	fb 04       	cpc	r15, r11
 8f2:	80 f3       	brcs	.-32     	; 0x8d4 <MATH_u32Power+0x30>
	{
		Local_u32Res*=Copy_u32Num;
	}
	return Local_u32Res;
 8f4:	ff 90       	pop	r15
 8f6:	ef 90       	pop	r14
 8f8:	df 90       	pop	r13
 8fa:	cf 90       	pop	r12
 8fc:	bf 90       	pop	r11
 8fe:	af 90       	pop	r10
 900:	9f 90       	pop	r9
 902:	8f 90       	pop	r8
 904:	7f 90       	pop	r7
 906:	6f 90       	pop	r6
 908:	5f 90       	pop	r5
 90a:	4f 90       	pop	r4
 90c:	08 95       	ret

0000090e <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit()
{
	DDRA=PORTA_DIR;
 90e:	8f ef       	ldi	r24, 0xFF	; 255
 910:	8a bb       	out	0x1a, r24	; 26
	DDRB=PORTB_DIR;
 912:	17 ba       	out	0x17, r1	; 23
	DDRC=PORTC_DIR;
 914:	87 e0       	ldi	r24, 0x07	; 7
 916:	84 bb       	out	0x14, r24	; 20
	DDRD=PORTD_DIR;
 918:	11 ba       	out	0x11, r1	; 17
	
	PORTA=PORTA_INITIAL_VALUE;
 91a:	1b ba       	out	0x1b, r1	; 27
	PORTB=PORTB_INITIAL_VALUE;
 91c:	84 e0       	ldi	r24, 0x04	; 4
 91e:	88 bb       	out	0x18, r24	; 24
	PORTC=PORTC_INITIAL_VALUE;
 920:	15 ba       	out	0x15, r1	; 21
	PORTD=PORTD_INITIAL_VALUE;
 922:	8c e0       	ldi	r24, 0x0C	; 12
 924:	82 bb       	out	0x12, r24	; 18
 926:	08 95       	ret

00000928 <__mulsi3>:
 928:	db 01       	movw	r26, r22
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	0e 94 c6 04 	call	0x98c	; 0x98c <__muluhisi3>
 932:	bf 91       	pop	r27
 934:	af 91       	pop	r26
 936:	a2 9f       	mul	r26, r18
 938:	80 0d       	add	r24, r0
 93a:	91 1d       	adc	r25, r1
 93c:	a3 9f       	mul	r26, r19
 93e:	90 0d       	add	r25, r0
 940:	b2 9f       	mul	r27, r18
 942:	90 0d       	add	r25, r0
 944:	11 24       	eor	r1, r1
 946:	08 95       	ret

00000948 <__udivmodsi4>:
 948:	a1 e2       	ldi	r26, 0x21	; 33
 94a:	1a 2e       	mov	r1, r26
 94c:	aa 1b       	sub	r26, r26
 94e:	bb 1b       	sub	r27, r27
 950:	fd 01       	movw	r30, r26
 952:	0d c0       	rjmp	.+26     	; 0x96e <__udivmodsi4_ep>

00000954 <__udivmodsi4_loop>:
 954:	aa 1f       	adc	r26, r26
 956:	bb 1f       	adc	r27, r27
 958:	ee 1f       	adc	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	a2 17       	cp	r26, r18
 95e:	b3 07       	cpc	r27, r19
 960:	e4 07       	cpc	r30, r20
 962:	f5 07       	cpc	r31, r21
 964:	20 f0       	brcs	.+8      	; 0x96e <__udivmodsi4_ep>
 966:	a2 1b       	sub	r26, r18
 968:	b3 0b       	sbc	r27, r19
 96a:	e4 0b       	sbc	r30, r20
 96c:	f5 0b       	sbc	r31, r21

0000096e <__udivmodsi4_ep>:
 96e:	66 1f       	adc	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	1a 94       	dec	r1
 978:	69 f7       	brne	.-38     	; 0x954 <__udivmodsi4_loop>
 97a:	60 95       	com	r22
 97c:	70 95       	com	r23
 97e:	80 95       	com	r24
 980:	90 95       	com	r25
 982:	9b 01       	movw	r18, r22
 984:	ac 01       	movw	r20, r24
 986:	bd 01       	movw	r22, r26
 988:	cf 01       	movw	r24, r30
 98a:	08 95       	ret

0000098c <__muluhisi3>:
 98c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 990:	a5 9f       	mul	r26, r21
 992:	90 0d       	add	r25, r0
 994:	b4 9f       	mul	r27, r20
 996:	90 0d       	add	r25, r0
 998:	a4 9f       	mul	r26, r20
 99a:	80 0d       	add	r24, r0
 99c:	91 1d       	adc	r25, r1
 99e:	11 24       	eor	r1, r1
 9a0:	08 95       	ret

000009a2 <__umulhisi3>:
 9a2:	a2 9f       	mul	r26, r18
 9a4:	b0 01       	movw	r22, r0
 9a6:	b3 9f       	mul	r27, r19
 9a8:	c0 01       	movw	r24, r0
 9aa:	a3 9f       	mul	r26, r19
 9ac:	70 0d       	add	r23, r0
 9ae:	81 1d       	adc	r24, r1
 9b0:	11 24       	eor	r1, r1
 9b2:	91 1d       	adc	r25, r1
 9b4:	b2 9f       	mul	r27, r18
 9b6:	70 0d       	add	r23, r0
 9b8:	81 1d       	adc	r24, r1
 9ba:	11 24       	eor	r1, r1
 9bc:	91 1d       	adc	r25, r1
 9be:	08 95       	ret

000009c0 <_exit>:
 9c0:	f8 94       	cli

000009c2 <__stop_program>:
 9c2:	ff cf       	rjmp	.-2      	; 0x9c2 <__stop_program>
