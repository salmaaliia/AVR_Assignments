
ADC_TASK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000008b6  0000094a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  0000094c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a37  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  000025ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000117d  00000000  00000000  0000316e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  000042ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000991  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017b4  00000000  00000000  000051c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00006979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_1>
   8:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_2>
   c:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
  8a:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
	CLCD_voidG0ToXY( Copy_u8Xpos, Copy_u8Ypos);
	
	/*Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
	
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
  aa:	6c 2f       	mov	r22, r28
  ac:	60 7f       	andi	r22, 0xF0	; 240
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8SetPortValue>
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
  be:	83 ef       	ldi	r24, 0xF3	; 243
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <CLCD_voidSendCommand+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <CLCD_voidSendCommand+0x36>
  c8:	00 00       	nop
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
  d4:	92 e4       	ldi	r25, 0x42	; 66
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <CLCD_voidSendCommand+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <CLCD_voidSendCommand+0x4a>
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	c8 9f       	mul	r28, r24
  e0:	b0 01       	movw	r22, r0
  e2:	11 24       	eor	r1, r1
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8SetPortValue>
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
  f4:	83 ef       	ldi	r24, 0xF3	; 243
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <CLCD_voidSendCommand+0x66>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <CLCD_voidSendCommand+0x6c>
  fe:	00 00       	nop
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <CLCD_voidSendData>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 126:	6c 2f       	mov	r22, r28
 128:	60 7f       	andi	r22, 0xF0	; 240
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8SetPortValue>
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <CLCD_voidSendData+0x30>
 142:	00 c0       	rjmp	.+0      	; 0x144 <CLCD_voidSendData+0x36>
 144:	00 00       	nop
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 150:	92 e4       	ldi	r25, 0x42	; 66
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <CLCD_voidSendData+0x44>
 156:	00 c0       	rjmp	.+0      	; 0x158 <CLCD_voidSendData+0x4a>
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	c8 9f       	mul	r28, r24
 15c:	b0 01       	movw	r22, r0
 15e:	11 24       	eor	r1, r1
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8SetPortValue>
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <CLCD_voidSendData+0x66>
 178:	00 c0       	rjmp	.+0      	; 0x17a <CLCD_voidSendData+0x6c>
 17a:	00 00       	nop
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_u8SetPinValue>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
 18a:	8f 92       	push	r8
 18c:	9f 92       	push	r9
 18e:	af 92       	push	r10
 190:	bf 92       	push	r11
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	cf 93       	push	r28
 19c:	4b 01       	movw	r8, r22
 19e:	5c 01       	movw	r10, r24
	u8 Local_u8NumOfDigits = 0;
	u8 Local_u8Quotient = 1;
 1a0:	21 e0       	ldi	r18, 0x01	; 1
	
}

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
	u8 Local_u8NumOfDigits = 0;
 1a2:	c1 2c       	mov	r12, r1
	u8 Local_u8Quotient = 1;
	u8 Local_u8Digit;
	/*Calculate the number of digits*/
	while(Local_u8Quotient!=0)
 1a4:	11 c0       	rjmp	.+34     	; 0x1c8 <CLCD_voidSendNumber+0x3e>
	{
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
 1a6:	c3 94       	inc	r12
 1a8:	2c 2d       	mov	r18, r12
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a6 01 	call	0x34c	; 0x34c <MATH_u32Power>
 1bc:	9b 01       	movw	r18, r22
 1be:	ac 01       	movw	r20, r24
 1c0:	c5 01       	movw	r24, r10
 1c2:	b4 01       	movw	r22, r8
 1c4:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodsi4>
{
	u8 Local_u8NumOfDigits = 0;
	u8 Local_u8Quotient = 1;
	u8 Local_u8Digit;
	/*Calculate the number of digits*/
	while(Local_u8Quotient!=0)
 1c8:	21 11       	cpse	r18, r1
 1ca:	ed cf       	rjmp	.-38     	; 0x1a6 <CLCD_voidSendNumber+0x1c>
	{
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--)
 1cc:	d1 2c       	mov	r13, r1
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	c8 1a       	sub	r12, r24
 1d2:	d1 08       	sbc	r13, r1
 1d4:	0d 2c       	mov	r0, r13
 1d6:	00 0c       	add	r0, r0
 1d8:	ee 08       	sbc	r14, r14
 1da:	ff 08       	sbc	r15, r15
 1dc:	28 c0       	rjmp	.+80     	; 0x22e <CLCD_voidSendNumber+0xa4>
	{
		Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
 1de:	a7 01       	movw	r20, r14
 1e0:	96 01       	movw	r18, r12
 1e2:	6a e0       	ldi	r22, 0x0A	; 10
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 a6 01 	call	0x34c	; 0x34c <MATH_u32Power>
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	c5 01       	movw	r24, r10
 1f4:	b4 01       	movw	r22, r8
 1f6:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodsi4>
 1fa:	c2 2f       	mov	r28, r18
		Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
 1fc:	a7 01       	movw	r20, r14
 1fe:	96 01       	movw	r18, r12
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 a6 01 	call	0x34c	; 0x34c <MATH_u32Power>
 20c:	9b 01       	movw	r18, r22
 20e:	ac 01       	movw	r20, r24
 210:	c5 01       	movw	r24, r10
 212:	b4 01       	movw	r22, r8
 214:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodsi4>
 218:	4b 01       	movw	r8, r22
 21a:	5c 01       	movw	r10, r24
		Local_u8Digit+=48;
		CLCD_voidSendData(Local_u8Digit);
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	8c 0f       	add	r24, r28
 220:	0e 94 87 00 	call	0x10e	; 0x10e <CLCD_voidSendData>
	while(Local_u8Quotient!=0)
	{
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--)
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	c8 1a       	sub	r12, r24
 228:	d1 08       	sbc	r13, r1
 22a:	e1 08       	sbc	r14, r1
 22c:	f1 08       	sbc	r15, r1
 22e:	ff 20       	and	r15, r15
 230:	b4 f6       	brge	.-84     	; 0x1de <CLCD_voidSendNumber+0x54>
		Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
		Local_u8Digit+=48;
		CLCD_voidSendData(Local_u8Digit);
	}
	
}
 232:	cf 91       	pop	r28
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	9f 90       	pop	r9
 242:	8f 90       	pop	r8
 244:	08 95       	ret

00000246 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
	CLCD_voidSendCommand(0b00000001);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
 24c:	08 95       	ret

0000024e <CLCD_voidInit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	97 e2       	ldi	r25, 0x27	; 39
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <CLCD_voidInit+0x4>
 256:	00 c0       	rjmp	.+0      	; 0x258 <CLCD_voidInit+0xa>
 258:	00 00       	nop
	/*Wait for more than 30ms*/
	_delay_ms(40);
	
	if(CLCD_MODE == CLCD_4BIT)
	{
		CLCD_voidSendCommand(0x33);
 25a:	83 e3       	ldi	r24, 0x33	; 51
 25c:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x32);
 260:	82 e3       	ldi	r24, 0x32	; 50
 262:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	}
	
	/*Function set */
	CLCD_voidSendCommand(CLCD_FUNCTION_SET); 
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	9d e0       	ldi	r25, 0x0D	; 13
 26e:	9a 95       	dec	r25
 270:	f1 f7       	brne	.-4      	; 0x26e <CLCD_voidInit+0x20>
	
	_delay_us(39);
	
	/*Display ON/OFF control*/
	CLCD_voidSendCommand(CLCD_DISPLAY_ON_OFF);
 272:	8e e0       	ldi	r24, 0x0E	; 14
 274:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
 278:	8d e0       	ldi	r24, 0x0D	; 13
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <CLCD_voidInit+0x2c>
	
	_delay_us(39);
	
	/*Clear display*/
	CLCD_voidSendCommand(1);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <CLCD_voidInit+0x3a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <CLCD_voidInit+0x40>
 28e:	00 00       	nop
 290:	08 95       	ret

00000292 <LM35_u16CalculateTemp>:
#include "LM35_interface.h"
#include "LM35_private.h"


static u16 LM35_u16CalculateTemp(u16 Copy_u16Reading)
{
 292:	af 92       	push	r10
 294:	bf 92       	push	r11
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
#if ADC_ADJUSTMENT_SELECT == RIGHT_ADJUST
		u16 Local_u16MilliVolt = ((u32)Copy_u16Reading*5000ULL)/1024ULL;
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f8 e8       	ldi	r31, 0x88	; 136
 2aa:	af 2e       	mov	r10, r31
 2ac:	f0 2d       	mov	r31, r0
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f3 e1       	ldi	r31, 0x13	; 19
 2b2:	bf 2e       	mov	r11, r31
 2b4:	f0 2d       	mov	r31, r0
 2b6:	c1 2c       	mov	r12, r1
 2b8:	d1 2c       	mov	r13, r1
 2ba:	e1 2c       	mov	r14, r1
 2bc:	f1 2c       	mov	r15, r1
 2be:	00 e0       	ldi	r16, 0x00	; 0
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	28 2f       	mov	r18, r24
 2c4:	39 2f       	mov	r19, r25
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__muldi3>
 2d6:	0a e0       	ldi	r16, 0x0A	; 10
 2d8:	0e 94 3d 04 	call	0x87a	; 0x87a <__lshrdi3>
		u16 Local_u16Temp =Local_u16MilliVolt/10ULL;
 2dc:	ad ec       	ldi	r26, 0xCD	; 205
 2de:	bc ec       	ldi	r27, 0xCC	; 204
 2e0:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
		u16 Local_u16MilliVolt = ((u32)Copy_u16Reading*5000ULL)/256ULL;
		u16 Local_u16Temp =Local_u16MilliVolt/10ULL;
#endif

return Local_u16Temp;
}
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	08 95       	ret

00000306 <LM35_GetTempReadingBlocking>:
u8 LM35_GetTempReadingBlocking(u8 Copy_u8Channel, u16* Copy_u16Reading)
{
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <LM35_GetTempReadingBlocking+0xa>
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = OK;
	if (Copy_u16Reading == NULL)
 314:	61 15       	cp	r22, r1
 316:	71 05       	cpc	r23, r1
 318:	89 f0       	breq	.+34     	; 0x33c <LM35_GetTempReadingBlocking+0x36>
 31a:	8b 01       	movw	r16, r22
	{
		Local_u8ErrorState = NULL_POINTER;
	}
	else
	{
		u16 Local_u16Reading = 0;
 31c:	1a 82       	std	Y+2, r1	; 0x02
 31e:	19 82       	std	Y+1, r1	; 0x01
		ADC_u8BlockingRead(Copy_u8Channel, &Local_u16Reading);
 320:	be 01       	movw	r22, r28
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	0e 94 15 02 	call	0x42a	; 0x42a <ADC_u8BlockingRead>
		*Copy_u16Reading = LM35_u16CalculateTemp(Local_u16Reading);
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	0e 94 49 01 	call	0x292	; 0x292 <LM35_u16CalculateTemp>
 332:	f8 01       	movw	r30, r16
 334:	91 83       	std	Z+1, r25	; 0x01
 336:	80 83       	st	Z, r24

return Local_u16Temp;
}
u8 LM35_GetTempReadingBlocking(u8 Copy_u8Channel, u16* Copy_u16Reading)
{
	u8 Local_u8ErrorState = OK;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	01 c0       	rjmp	.+2      	; 0x33e <LM35_GetTempReadingBlocking+0x38>
	if (Copy_u16Reading == NULL)
	{
		Local_u8ErrorState = NULL_POINTER;
 33c:	82 e0       	ldi	r24, 0x02	; 2
		ADC_u8BlockingRead(Copy_u8Channel, &Local_u16Reading);
		*Copy_u16Reading = LM35_u16CalculateTemp(Local_u16Reading);
		
	}
	return Local_u8ErrorState;
}
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <MATH_u32Power>:
#include "STD_TYPES.h"
#include "MATH.h"

u32 MATH_u32Power(u32 Copy_u32Num, u32 Copy_u32Exponent)
{
 34c:	4f 92       	push	r4
 34e:	5f 92       	push	r5
 350:	6f 92       	push	r6
 352:	7f 92       	push	r7
 354:	8f 92       	push	r8
 356:	9f 92       	push	r9
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	2b 01       	movw	r4, r22
 366:	3c 01       	movw	r6, r24
 368:	49 01       	movw	r8, r18
 36a:	5a 01       	movw	r10, r20
	u32 Local_u32Itr;
	u32 Local_u32Res=1;
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
	for(Local_u32Itr = 0; Local_u32Itr<Copy_u32Exponent; Local_u32Itr++)
 374:	c1 2c       	mov	r12, r1
 376:	d1 2c       	mov	r13, r1
 378:	76 01       	movw	r14, r12
 37a:	0b c0       	rjmp	.+22     	; 0x392 <MATH_u32Power+0x46>
	{
		Local_u32Res*=Copy_u32Num;
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	c3 01       	movw	r24, r6
 382:	b2 01       	movw	r22, r4
 384:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsi3>

u32 MATH_u32Power(u32 Copy_u32Num, u32 Copy_u32Exponent)
{
	u32 Local_u32Itr;
	u32 Local_u32Res=1;
	for(Local_u32Itr = 0; Local_u32Itr<Copy_u32Exponent; Local_u32Itr++)
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	c2 1a       	sub	r12, r18
 38c:	d2 0a       	sbc	r13, r18
 38e:	e2 0a       	sbc	r14, r18
 390:	f2 0a       	sbc	r15, r18
 392:	c8 14       	cp	r12, r8
 394:	d9 04       	cpc	r13, r9
 396:	ea 04       	cpc	r14, r10
 398:	fb 04       	cpc	r15, r11
 39a:	80 f3       	brcs	.-32     	; 0x37c <MATH_u32Power+0x30>
	{
		Local_u32Res*=Copy_u32Num;
	}
	return Local_u32Res;
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <main>:
#include "HAL/LM35/LM35_interface.h"
u16 APP_ADCRead = 0;

int main(void)
{
	PORT_voidInit();
 3b6:	0e 94 8c 03 	call	0x718	; 0x718 <PORT_voidInit>
	CLCD_voidInit();
 3ba:	0e 94 27 01 	call	0x24e	; 0x24e <CLCD_voidInit>
	ADC_VoidInit();
 3be:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <ADC_VoidInit>
	//EXTI_voidInt0Init();
	GIE_voidEnable();
 3c2:	0e 94 88 03 	call	0x710	; 0x710 <GIE_voidEnable>
	
	while (1)
	{
		LM35_GetTempReadingBlocking(ADC2,  &APP_ADCRead);
 3c6:	62 e6       	ldi	r22, 0x62	; 98
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 83 01 	call	0x306	; 0x306 <LM35_GetTempReadingBlocking>
		CLCD_voidSendNumber(APP_ADCRead);
 3d0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 3d4:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 c5 00 	call	0x18a	; 0x18a <CLCD_voidSendNumber>
 3e0:	2f e9       	ldi	r18, 0x9F	; 159
 3e2:	86 e8       	ldi	r24, 0x86	; 134
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x30>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x3a>
 3f0:	00 00       	nop
		_delay_ms(500);
		CLCD_voidClearDisplay();
 3f2:	0e 94 23 01 	call	0x246	; 0x246 <CLCD_voidClearDisplay>
 3f6:	e7 cf       	rjmp	.-50     	; 0x3c6 <main+0x10>

000003f8 <ADC_VoidInit>:
	{
		Local_u8ErrorState = BUSY_FUNC;
		
	}
	return Local_u8ErrorState;
}
 3f8:	87 b1       	in	r24, 0x07	; 7
 3fa:	8f 77       	andi	r24, 0x7F	; 127
 3fc:	87 b9       	out	0x07, r24	; 7
 3fe:	87 b1       	in	r24, 0x07	; 7
 400:	80 64       	ori	r24, 0x40	; 64
 402:	87 b9       	out	0x07, r24	; 7
 404:	87 b1       	in	r24, 0x07	; 7
 406:	8f 7d       	andi	r24, 0xDF	; 223
 408:	87 b9       	out	0x07, r24	; 7
 40a:	86 b1       	in	r24, 0x06	; 6
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	86 b9       	out	0x06, r24	; 6
 410:	86 b1       	in	r24, 0x06	; 6
 412:	88 7f       	andi	r24, 0xF8	; 248
 414:	86 b9       	out	0x06, r24	; 6
 416:	86 b1       	in	r24, 0x06	; 6
 418:	87 60       	ori	r24, 0x07	; 7
 41a:	86 b9       	out	0x06, r24	; 6
 41c:	86 b1       	in	r24, 0x06	; 6
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	86 b9       	out	0x06, r24	; 6
 422:	86 b1       	in	r24, 0x06	; 6
 424:	80 68       	ori	r24, 0x80	; 128
 426:	86 b9       	out	0x06, r24	; 6
 428:	08 95       	ret

0000042a <ADC_u8BlockingRead>:
 42a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42e:	91 30       	cpi	r25, 0x01	; 1
 430:	11 f5       	brne	.+68     	; 0x476 <ADC_u8BlockingRead+0x4c>
 432:	61 15       	cp	r22, r1
 434:	71 05       	cpc	r23, r1
 436:	19 f1       	breq	.+70     	; 0x47e <ADC_u8BlockingRead+0x54>
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 43e:	97 b1       	in	r25, 0x07	; 7
 440:	90 7e       	andi	r25, 0xE0	; 224
 442:	89 2b       	or	r24, r25
 444:	87 b9       	out	0x07, r24	; 7
 446:	86 b1       	in	r24, 0x06	; 6
 448:	80 64       	ori	r24, 0x40	; 64
 44a:	86 b9       	out	0x06, r24	; 6
 44c:	86 b1       	in	r24, 0x06	; 6
 44e:	87 7f       	andi	r24, 0xF7	; 247
 450:	86 b9       	out	0x06, r24	; 6
 452:	34 9b       	sbis	0x06, 4	; 6
 454:	fe cf       	rjmp	.-4      	; 0x452 <ADC_u8BlockingRead+0x28>
 456:	86 b1       	in	r24, 0x06	; 6
 458:	80 61       	ori	r24, 0x10	; 16
 45a:	86 b9       	out	0x06, r24	; 6
 45c:	86 b1       	in	r24, 0x06	; 6
 45e:	88 60       	ori	r24, 0x08	; 8
 460:	86 b9       	out	0x06, r24	; 6
 462:	84 b1       	in	r24, 0x04	; 4
 464:	95 b1       	in	r25, 0x05	; 5
 466:	fb 01       	movw	r30, r22
 468:	91 83       	std	Z+1, r25	; 0x01
 46a:	80 83       	st	Z, r24
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret
 476:	92 30       	cpi	r25, 0x02	; 2
 478:	21 f0       	breq	.+8      	; 0x482 <ADC_u8BlockingRead+0x58>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	08 95       	ret
 482:	84 e0       	ldi	r24, 0x04	; 4
 484:	08 95       	ret

00000486 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16(void)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	/*Read ADC result*/
	#if ADC_ADJUSTMENT_SELECT == LEFT_ADJUST
	*ADC_pu16Reading = ADCH;
	
	#elif ADC_ADJUSTMENT_SELECT == RIGHT_ADJUST
	*ADC_pu16Reading = ADC;
 4a8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ADC_pu16Reading>
 4ac:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ADC_pu16Reading+0x1>
 4b0:	84 b1       	in	r24, 0x04	; 4
 4b2:	95 b1       	in	r25, 0x05	; 5
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	80 83       	st	Z, r24
	
	#else
	#error "Wrong adjust option"
	#endif
	
	if(ADC_CallBackpvNotificationFunc != NULL)
 4b8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ADC_CallBackpvNotificationFunc>
 4bc:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ADC_CallBackpvNotificationFunc+0x1>
 4c0:	30 97       	sbiw	r30, 0x00	; 0
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_16+0x40>
	{
		ADC_CallBackpvNotificationFunc(*ADC_pu16Reading);
 4c4:	09 95       	icall
	}
	/*Make ADC state be IDLE because it finished*/
	ADC_u8BusyState = IDLE;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA, ADIE);
 4cc:	86 b1       	in	r24, 0x06	; 6
 4ce:	87 7f       	andi	r24, 0xF7	; 247
 4d0:	86 b9       	out	0x06, r24	; 6
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <DIO_u8SetPinValue>:
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
	if(Copy_u8Pin<=DIO_u8PIN7)
 4f4:	68 30       	cpi	r22, 0x08	; 8
 4f6:	08 f0       	brcs	.+2      	; 0x4fa <DIO_u8SetPinValue+0x6>
 4f8:	78 c0       	rjmp	.+240    	; 0x5ea <DIO_u8SetPinValue+0xf6>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 4fa:	41 11       	cpse	r20, r1
 4fc:	3c c0       	rjmp	.+120    	; 0x576 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	99 f0       	breq	.+38     	; 0x528 <DIO_u8SetPinValue+0x34>
 502:	28 f0       	brcs	.+10     	; 0x50e <DIO_u8SetPinValue+0x1a>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	e9 f0       	breq	.+58     	; 0x542 <DIO_u8SetPinValue+0x4e>
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	41 f1       	breq	.+80     	; 0x55c <DIO_u8SetPinValue+0x68>
 50c:	70 c0       	rjmp	.+224    	; 0x5ee <DIO_u8SetPinValue+0xfa>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 50e:	2b b3       	in	r18, 0x1b	; 27
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_u8SetPinValue+0x26>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_u8SetPinValue+0x22>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	8b bb       	out	0x1b, r24	; 27
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 524:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 526:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 528:	28 b3       	in	r18, 0x18	; 24
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_u8SetPinValue+0x40>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_u8SetPinValue+0x3c>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	88 bb       	out	0x18, r24	; 24
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 53e:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 540:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 542:	25 b3       	in	r18, 0x15	; 21
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_u8SetPinValue+0x5a>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_u8SetPinValue+0x56>
 552:	80 95       	com	r24
 554:	82 23       	and	r24, r18
 556:	85 bb       	out	0x15, r24	; 21
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 558:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 55a:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 55c:	22 b3       	in	r18, 0x12	; 18
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_u8SetPinValue+0x74>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_u8SetPinValue+0x70>
 56c:	80 95       	com	r24
 56e:	82 23       	and	r24, r18
 570:	82 bb       	out	0x12, r24	; 18
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 572:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 574:	08 95       	ret
				default: Local_u8_ErrorState =1;
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 576:	41 30       	cpi	r20, 0x01	; 1
 578:	e1 f5       	brne	.+120    	; 0x5f2 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	91 f0       	breq	.+36     	; 0x5a2 <DIO_u8SetPinValue+0xae>
 57e:	28 f0       	brcs	.+10     	; 0x58a <DIO_u8SetPinValue+0x96>
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	d9 f0       	breq	.+54     	; 0x5ba <DIO_u8SetPinValue+0xc6>
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	29 f1       	breq	.+74     	; 0x5d2 <DIO_u8SetPinValue+0xde>
 588:	36 c0       	rjmp	.+108    	; 0x5f6 <DIO_u8SetPinValue+0x102>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 58a:	2b b3       	in	r18, 0x1b	; 27
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_u8SetPinValue+0xa2>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_u8SetPinValue+0x9e>
 59a:	82 2b       	or	r24, r18
 59c:	8b bb       	out	0x1b, r24	; 27
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 59e:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 5a0:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 5a2:	28 b3       	in	r18, 0x18	; 24
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_u8SetPinValue+0xba>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_u8SetPinValue+0xb6>
 5b2:	82 2b       	or	r24, r18
 5b4:	88 bb       	out	0x18, r24	; 24
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 5b6:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 5b8:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 5ba:	25 b3       	in	r18, 0x15	; 21
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_u8SetPinValue+0xd2>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_u8SetPinValue+0xce>
 5ca:	82 2b       	or	r24, r18
 5cc:	85 bb       	out	0x15, r24	; 21
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 5ce:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 5d0:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 5d2:	22 b3       	in	r18, 0x12	; 18
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_u8SetPinValue+0xea>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_u8SetPinValue+0xe6>
 5e2:	82 2b       	or	r24, r18
 5e4:	82 bb       	out	0x12, r24	; 18
	return Local_u8_ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8_ErrorState =0; 
 5e6:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 5e8:	08 95       	ret
			Local_u8_ErrorState =1;
		}	
	}
	else
	{
		Local_u8_ErrorState =1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8_ErrorState =1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	08 95       	ret
				default: Local_u8_ErrorState =1;
			}
		}
		else
		{
			Local_u8_ErrorState =1;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8_ErrorState =1;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8_ErrorState =1;
	}
	return Local_u8_ErrorState;
}
 5f8:	08 95       	ret

000005fa <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
	switch(Copy_u8Port)
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	49 f0       	breq	.+18     	; 0x610 <DIO_u8SetPortValue+0x16>
 5fe:	28 f0       	brcs	.+10     	; 0x60a <DIO_u8SetPortValue+0x10>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	49 f0       	breq	.+18     	; 0x616 <DIO_u8SetPortValue+0x1c>
 604:	83 30       	cpi	r24, 0x03	; 3
 606:	51 f0       	breq	.+20     	; 0x61c <DIO_u8SetPortValue+0x22>
 608:	0c c0       	rjmp	.+24     	; 0x622 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 60a:	6b bb       	out	0x1b, r22	; 27
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 60c:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 60e:	08 95       	ret
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 610:	68 bb       	out	0x18, r22	; 24
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 612:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 614:	08 95       	ret
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 616:	65 bb       	out	0x15, r22	; 21
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 618:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 61a:	08 95       	ret
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 61c:	62 bb       	out	0x12, r22	; 18
	}
	return Local_u8_ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
	u8 Local_u8_ErrorState =0;
 61e:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 620:	08 95       	ret
		default: Local_u8_ErrorState =1;
 622:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	return Local_u8_ErrorState;	
}
 624:	08 95       	ret

00000626 <__vector_1>:
	else{
		Local_u8_ErrorState = NULL_POINTER;
	}
	
	return Local_u8_ErrorState;
}
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
 648:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <EXTI_pvInt0Func>
 64c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <EXTI_pvInt0Func+0x1>
 650:	09 95       	icall
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <__vector_2>:
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
 67e:	2f 93       	push	r18
 680:	3f 93       	push	r19
 682:	4f 93       	push	r20
 684:	5f 93       	push	r21
 686:	6f 93       	push	r22
 688:	7f 93       	push	r23
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	af 93       	push	r26
 690:	bf 93       	push	r27
 692:	ef 93       	push	r30
 694:	ff 93       	push	r31
 696:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <EXTI_pvInt1Func>
 69a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <EXTI_pvInt1Func+0x1>
 69e:	09 95       	icall
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
	EXTI_pvInt2Func();
 6e4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <EXTI_pvInt2Func>
 6e8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <EXTI_pvInt2Func+0x1>
 6ec:	09 95       	icall
}
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <GIE_voidEnable>:
#include "GIE_interface.h"


void GIE_voidEnable(void)
{
	SET_BIT(SREG, SREG_I);
 710:	8f b7       	in	r24, 0x3f	; 63
 712:	80 68       	ori	r24, 0x80	; 128
 714:	8f bf       	out	0x3f, r24	; 63
 716:	08 95       	ret

00000718 <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit()
{
	DDRA=PORTA_DIR;
 718:	1a ba       	out	0x1a, r1	; 26
	DDRB=PORTB_DIR;
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	87 bb       	out	0x17, r24	; 23
	DDRC=PORTC_DIR;
 71e:	84 bb       	out	0x14, r24	; 20
	DDRD=PORTD_DIR;
 720:	11 ba       	out	0x11, r1	; 17
	
	PORTA=PORTA_INITIAL_VALUE;
 722:	1b ba       	out	0x1b, r1	; 27
	PORTB=PORTB_INITIAL_VALUE;
 724:	18 ba       	out	0x18, r1	; 24
	PORTC=PORTC_INITIAL_VALUE;
 726:	15 ba       	out	0x15, r1	; 21
	PORTD=PORTD_INITIAL_VALUE;
 728:	82 bb       	out	0x12, r24	; 18
 72a:	08 95       	ret

0000072c <__mulsi3>:
 72c:	db 01       	movw	r26, r22
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__muluhisi3>
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	a2 9f       	mul	r26, r18
 73c:	80 0d       	add	r24, r0
 73e:	91 1d       	adc	r25, r1
 740:	a3 9f       	mul	r26, r19
 742:	90 0d       	add	r25, r0
 744:	b2 9f       	mul	r27, r18
 746:	90 0d       	add	r25, r0
 748:	11 24       	eor	r1, r1
 74a:	08 95       	ret

0000074c <__udivmodsi4>:
 74c:	a1 e2       	ldi	r26, 0x21	; 33
 74e:	1a 2e       	mov	r1, r26
 750:	aa 1b       	sub	r26, r26
 752:	bb 1b       	sub	r27, r27
 754:	fd 01       	movw	r30, r26
 756:	0d c0       	rjmp	.+26     	; 0x772 <__udivmodsi4_ep>

00000758 <__udivmodsi4_loop>:
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	ee 1f       	adc	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	a2 17       	cp	r26, r18
 762:	b3 07       	cpc	r27, r19
 764:	e4 07       	cpc	r30, r20
 766:	f5 07       	cpc	r31, r21
 768:	20 f0       	brcs	.+8      	; 0x772 <__udivmodsi4_ep>
 76a:	a2 1b       	sub	r26, r18
 76c:	b3 0b       	sbc	r27, r19
 76e:	e4 0b       	sbc	r30, r20
 770:	f5 0b       	sbc	r31, r21

00000772 <__udivmodsi4_ep>:
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	1a 94       	dec	r1
 77c:	69 f7       	brne	.-38     	; 0x758 <__udivmodsi4_loop>
 77e:	60 95       	com	r22
 780:	70 95       	com	r23
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	9b 01       	movw	r18, r22
 788:	ac 01       	movw	r20, r24
 78a:	bd 01       	movw	r22, r26
 78c:	cf 01       	movw	r24, r30
 78e:	08 95       	ret

00000790 <__umulhisi3>:
 790:	a2 9f       	mul	r26, r18
 792:	b0 01       	movw	r22, r0
 794:	b3 9f       	mul	r27, r19
 796:	c0 01       	movw	r24, r0
 798:	a3 9f       	mul	r26, r19
 79a:	70 0d       	add	r23, r0
 79c:	81 1d       	adc	r24, r1
 79e:	11 24       	eor	r1, r1
 7a0:	91 1d       	adc	r25, r1
 7a2:	b2 9f       	mul	r27, r18
 7a4:	70 0d       	add	r23, r0
 7a6:	81 1d       	adc	r24, r1
 7a8:	11 24       	eor	r1, r1
 7aa:	91 1d       	adc	r25, r1
 7ac:	08 95       	ret

000007ae <__muluhisi3>:
 7ae:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 7b2:	a5 9f       	mul	r26, r21
 7b4:	90 0d       	add	r25, r0
 7b6:	b4 9f       	mul	r27, r20
 7b8:	90 0d       	add	r25, r0
 7ba:	a4 9f       	mul	r26, r20
 7bc:	80 0d       	add	r24, r0
 7be:	91 1d       	adc	r25, r1
 7c0:	11 24       	eor	r1, r1
 7c2:	08 95       	ret

000007c4 <__muldi3>:
 7c4:	df 93       	push	r29
 7c6:	cf 93       	push	r28
 7c8:	1f 93       	push	r17
 7ca:	0f 93       	push	r16
 7cc:	9a 9d       	mul	r25, r10
 7ce:	f0 2d       	mov	r31, r0
 7d0:	21 9f       	mul	r18, r17
 7d2:	f0 0d       	add	r31, r0
 7d4:	8b 9d       	mul	r24, r11
 7d6:	f0 0d       	add	r31, r0
 7d8:	8a 9d       	mul	r24, r10
 7da:	e0 2d       	mov	r30, r0
 7dc:	f1 0d       	add	r31, r1
 7de:	03 9f       	mul	r16, r19
 7e0:	f0 0d       	add	r31, r0
 7e2:	02 9f       	mul	r16, r18
 7e4:	e0 0d       	add	r30, r0
 7e6:	f1 1d       	adc	r31, r1
 7e8:	4e 9d       	mul	r20, r14
 7ea:	e0 0d       	add	r30, r0
 7ec:	f1 1d       	adc	r31, r1
 7ee:	5e 9d       	mul	r21, r14
 7f0:	f0 0d       	add	r31, r0
 7f2:	4f 9d       	mul	r20, r15
 7f4:	f0 0d       	add	r31, r0
 7f6:	7f 93       	push	r23
 7f8:	6f 93       	push	r22
 7fa:	bf 92       	push	r11
 7fc:	af 92       	push	r10
 7fe:	5f 93       	push	r21
 800:	4f 93       	push	r20
 802:	d5 01       	movw	r26, r10
 804:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 808:	8b 01       	movw	r16, r22
 80a:	ac 01       	movw	r20, r24
 80c:	d7 01       	movw	r26, r14
 80e:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 812:	eb 01       	movw	r28, r22
 814:	e8 0f       	add	r30, r24
 816:	f9 1f       	adc	r31, r25
 818:	d6 01       	movw	r26, r12
 81a:	0e 94 32 04 	call	0x864	; 0x864 <__muldi3_6>
 81e:	2f 91       	pop	r18
 820:	3f 91       	pop	r19
 822:	d6 01       	movw	r26, r12
 824:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 828:	c6 0f       	add	r28, r22
 82a:	d7 1f       	adc	r29, r23
 82c:	e8 1f       	adc	r30, r24
 82e:	f9 1f       	adc	r31, r25
 830:	af 91       	pop	r26
 832:	bf 91       	pop	r27
 834:	0e 94 32 04 	call	0x864	; 0x864 <__muldi3_6>
 838:	2f 91       	pop	r18
 83a:	3f 91       	pop	r19
 83c:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 840:	c6 0f       	add	r28, r22
 842:	d7 1f       	adc	r29, r23
 844:	e8 1f       	adc	r30, r24
 846:	f9 1f       	adc	r31, r25
 848:	d6 01       	movw	r26, r12
 84a:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 84e:	e6 0f       	add	r30, r22
 850:	f7 1f       	adc	r31, r23
 852:	98 01       	movw	r18, r16
 854:	be 01       	movw	r22, r28
 856:	cf 01       	movw	r24, r30
 858:	11 24       	eor	r1, r1
 85a:	0f 91       	pop	r16
 85c:	1f 91       	pop	r17
 85e:	cf 91       	pop	r28
 860:	df 91       	pop	r29
 862:	08 95       	ret

00000864 <__muldi3_6>:
 864:	0e 94 c8 03 	call	0x790	; 0x790 <__umulhisi3>
 868:	46 0f       	add	r20, r22
 86a:	57 1f       	adc	r21, r23
 86c:	c8 1f       	adc	r28, r24
 86e:	d9 1f       	adc	r29, r25
 870:	08 f4       	brcc	.+2      	; 0x874 <__muldi3_6+0x10>
 872:	31 96       	adiw	r30, 0x01	; 1
 874:	08 95       	ret

00000876 <__ashrdi3>:
 876:	97 fb       	bst	r25, 7
 878:	10 f8       	bld	r1, 0

0000087a <__lshrdi3>:
 87a:	16 94       	lsr	r1
 87c:	00 08       	sbc	r0, r0
 87e:	0f 93       	push	r16
 880:	08 30       	cpi	r16, 0x08	; 8
 882:	98 f0       	brcs	.+38     	; 0x8aa <__lshrdi3+0x30>
 884:	08 50       	subi	r16, 0x08	; 8
 886:	23 2f       	mov	r18, r19
 888:	34 2f       	mov	r19, r20
 88a:	45 2f       	mov	r20, r21
 88c:	56 2f       	mov	r21, r22
 88e:	67 2f       	mov	r22, r23
 890:	78 2f       	mov	r23, r24
 892:	89 2f       	mov	r24, r25
 894:	90 2d       	mov	r25, r0
 896:	f4 cf       	rjmp	.-24     	; 0x880 <__lshrdi3+0x6>
 898:	05 94       	asr	r0
 89a:	97 95       	ror	r25
 89c:	87 95       	ror	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	57 95       	ror	r21
 8a4:	47 95       	ror	r20
 8a6:	37 95       	ror	r19
 8a8:	27 95       	ror	r18
 8aa:	0a 95       	dec	r16
 8ac:	aa f7       	brpl	.-22     	; 0x898 <__lshrdi3+0x1e>
 8ae:	0f 91       	pop	r16
 8b0:	08 95       	ret

000008b2 <_exit>:
 8b2:	f8 94       	cli

000008b4 <__stop_program>:
 8b4:	ff cf       	rjmp	.-2      	; 0x8b4 <__stop_program>
